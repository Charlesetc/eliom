description = "Eliom: client-server Web and mobile applications"
version = "4.0.0"

package "server" (
  description = "Eliom: server-side"
  version = "[distributed with Eliom]"
  directory = "server"

  requires = "%%DEPS%%"
  archive(byte) = "%%NAME%%.cma"
  archive(native) = "%%NAME%%.cmxa"
)

package "client" (
  description = "Eliom: client-side"
  version = "[distributed with Eliom]"
  directory = "client"

  requires = "%%CDEPS%%"
  archive(byte) = "%%NAME%%_client.cma eliom_client_main.cmo"

  linkopts(javascript) = "+%%NAME%%.client/eliom_client.js"
  linkopts(javascript) += "+js_of_ocaml/weak.js"
  linkopts(javascript) += "+js_of_ocaml/classlist.js"
)

package "syntax" (
  directory = "syntax"
  package "common" (
    description = "Syntax extension: spliting client and server code (base)"
    version = "[distributed with Eliom]"
    requires = "camlp4"
    requires(preprocessor, syntax, pkg_type_conv) = "type_conv"
    archive(syntax, preprocessor) = "pa_eliom_seed.cmo"
  )

  package "client" (
    description = "Syntax extension: spliting client and server code (client side)"
    version = "[distributed with Eliom]"
    requires(syntax, preprocessor) = "%%NAME%%.syntax.common"
    requires(syntax, toploop) = "%%NAME%%.syntax.common"
    archive(syntax, preprocessor) = "pa_eliom_client_client.cmo"
    archive(syntax, toploop) = "pa_eliom_client_client.cmo"
  )

  package "server" (
    description = "Syntax extension: spliting client and server code (server side)"
    version = "[distributed with Eliom]"
    requires(syntax, preprocessor) = "%%NAME%%.syntax.common"
    requires(syntax, toploop) = "%%NAME%%.syntax.common"
    archive(syntax, preprocessor) = "pa_eliom_client_server.cmo"
    archive(syntax, toploop) = "pa_eliom_client_server.cmo"
  )

  package "type" (
    description = "Syntax extension: spliting client and server code (type inference)"
    version = "[distributed with Eliom]"
    requires(syntax, preprocessor) = "%%NAME%%.syntax.common"
    archive(syntax, preprocessor) = "pa_eliom_type_filter.cmo"
  )

  package "predef" (
    description = "Syntax extension: predefined commonly use syntaxes"
    version = "[distributed with Eliom]"

    requires(syntax, preprocessor) = "%%SDEPS%%"
    requires(syntax, toploop) = "%%SDEPS%%"
    archive(syntax, preprocessor) = "-ignore dummy"
  )

)

package "ocamlbuild" (
  description = "Eliom ocamlbuild plugin (js_of_ocaml part included)"
  version = "[distributed with Eliom]"
  directory = "ocamlbuild"
  requires = "js_of_ocaml.ocamlbuild"
  archive(byte) = "ocamlbuild_eliom.cma"
  archive(byte, plugin) = "ocamlbuild_eliom.cma"
  archive(native) = "ocamlbuild_eliom.cmxa"
  archive(native, plugin) = "ocamlbuild_eliom.cmxs"
)
