
= Reactive Dom

{{{Html5.R}}} allow one to insert time varying values into the dom tree.
It rely on React's signal {{{'a React.signal}}}. More information about react
can be found on the [[http://erratique.ch/software/react| homepage]].

When dealing with dynamic content, one usally end up with a lot
of imperative dom manipulations : replacing, appending, removing dom
elements, updating attributes, etc.. [Html5.R] hide most
of those imperative dom operation. Every time a signal
change, the corresponding dom tree update itself.

== Example

<<code language="ocaml"|
open Eliom_content.Html5


let split s =
    let len = String.length s in
    let rec aux acc = function
      | 0 -> acc
      | n -> aux (s.[n - 1] :: acc) (pred n)
    in aux [] len

let title,set_title = React.S.create "initial"
(* title : string React.signal *)

let title_len = React.S.map String.length title
(* title_len : int React.signal *)

let rec input = lazy
  (D.input
     ~input_type:`Text
     ~a:[D.a_onkeyup (fun _ ->
         let s = Js.to_string ((To_dom.of_input (Lazy.force input))##value) in
         set_title s )]
     ())

let content : Html5_types.div_content_fun elt React.signal = React.S.map ( fun title ->
  let l = split title in
  F.div (
    List.map (fun c ->
      F.p [F.pcdata (Printf.sprintf "%c" c) ]
    ) l
  )
) title

let make_color lem =
  let d = max len 255 in
  Printf.sprintf "rgb(%d,%d,%d)" d d d

let body = D.div [
  (Lazy.force input :> Html5_types.div_content_fun elt);
  D.p ~a:[ R.a_style (React.S.map make_color len)] [R.pcdata title];
  R.node content
]

>>
